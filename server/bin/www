const https = require('https');
var fs = require('fs');
var path = require('path');
const debug = require('debug')('dataDisplayApp:server');
var ExpressPeerServer = require('peer').ExpressPeerServer;

const logger = require('../services/app.logger');
const config = require('../config');

let people = [{
        name: "Douglas  Pace"
    },
    {
        name: "Mcleod  Mueller"
    },
    {
        name: "Day  Meyers"
    },
    {
        name: "Aguirre  Ellis"
    },
    {
        name: "Cook  Tyson"
    }
];

const appConstants = config.app;
const loggerConfig = config.loggerConstant;
let appName = appConstants.APPNAME;
let app = require('../app/app')(appName);

// Get port from environment and store in Express.
let port = normalizePort(appConstants.PORT);

var options = {
    key: fs.readFileSync(path.resolve(__dirname, '../resources/key.pem')),
    cert: fs.readFileSync(path.resolve(__dirname, '../resources/cert.pem'))
};
var options1 = {
    debug: true
}

// Create HTTPS server.
var server = https.createServer(options, app);

var io = require('socket.io')(server);

io.on('connection', (socket) => {

    console.log('user connected');

    socket.on('disconnect', function() {
        console.log('user disconnected');
    });

    socket.on('add-message', (message) => {
        io.emit('message', { type: 'new-message', text: message });
    });

    /*console.log(this.onlineUser)*/
    io.emit('users', people);
});

app.use('/peerjs', ExpressPeerServer(server, options1));
// let server = https.createServer(app);

//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
options1
logger.debug(loggerConfig.SERVER_RUNNING + port);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + loggerConfig.REQUIRES_ELEVATED_PRIVILEGES);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + loggerConfig.ALREADY_IN_USE);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// Event listener for HTTP server "listening" event.
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}